# Generated by Django 2.2.1 on 2019-05-21 20:29

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Diet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='UserRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('dob', models.DateField(null=True)),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], max_length=2)),
                ('heightUnits', models.CharField(choices=[('CM', 'Centimeter'), ('IN', 'Inch'), ('FT', 'Foot'), ('M', 'Meter')], max_length=4)),
                ('weightUnits', models.CharField(choices=[('LB', 'Pounds'), ('KG', 'Kilograms'), ('ST', 'Stone')], max_length=3)),
                ('exerciseIntensity', models.CharField(choices=[('SEDENTARY', 'Sedentary'), ('LIGHT', 'Light'), ('MODERATE', 'Moderate'), ('INTENSE', 'Intense')], max_length=4)),
                ('height', models.FloatField(null=True)),
                ('weight', models.FloatField(null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Goal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('goalWeight', models.FloatField(null=True)),
                ('weightUnits', models.CharField(choices=[('LB', 'Pounds'), ('KG', 'Kilograms'), ('ST', 'Stone')], max_length=3, null=True)),
                ('goalDate', models.DateField(null=True)),
                ('typeOfGoal', models.CharField(choices=[('LOSE', 'Lose Weight'), ('MAINTAIN', 'Maintain Weight'), ('GAIN', 'Gain Weight')], max_length=3, null=True)),
                ('goalCompletion', models.BooleanField()),
                ('goalExceeded', models.BooleanField()),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ExerciseTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DietData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('FoodOrDrinkName', models.CharField(max_length=100, null=True)),
                ('CalorificCount', models.IntegerField(null=True)),
                ('TypeOfMeal', models.CharField(choices=[('BREAKFAST', 'Breakfast'), ('LUNCH', 'Lunch'), ('DINNER', 'Dinner')], max_length=3, null=True)),
                ('dateAdded', models.DateTimeField(blank=True, default=datetime.datetime.now, null=True)),
                ('DietLog', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='Log_of_data', to='Users.Diet')),
            ],
        ),
        migrations.AddField(
            model_name='diet',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ActivityDistance', models.IntegerField(null=True)),
                ('ActivityDuration', models.TimeField(null=True)),
                ('ActivityName', models.CharField(max_length=100, null=True)),
                ('TypeOfActivity', models.CharField(choices=[('RUNNING', 'Running'), ('SWIMMING', 'Swimming'), ('JOGGING', 'Jogging'), ('WALKING', 'Walking'), ('HIIT', 'High Intensity Interval Training'), ('FREE_WEIGHT', 'Free Weights'), ('WEIGHT_MACHINES', 'Weight Machines'), ('YOGA', 'Yoga'), ('OTHER', 'Other')], max_length=9, null=True)),
                ('Completion', models.BooleanField()),
                ('ExerciseLog', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='Exercise_Log_Of_Activities', to='Users.ExerciseTemplate')),
            ],
        ),
    ]
